# ACTIWELL BACKEND - HƯỚNG DẪN SETUP VÀ CHẠY HỆ THỐNG

## 📋 BƯỚC 1: CHUẨN BỊ MÔI TRƯỜNG

### 1.1 Tạo cấu trúc thư mục
```bash
# Tạo thư mục project
sudo mkdir -p /opt/actiwell
cd /opt/actiwell

# Tạo các thư mục con
sudo mkdir -p {templates,static,routes,logs,data}

# Tạo user cho ứng dụng
sudo useradd -r -s /bin/bash -d /opt/actiwell actiwell
sudo chown -R actiwell:actiwell /opt/actiwell
```

### 1.2 Cài đặt dependencies
```bash
# Cập nhật system
sudo apt update && sudo apt upgrade -y

# Cài đặt Python và MySQL
sudo apt install -y python3 python3-pip python3-venv mysql-server

# Cài đặt USB và serial support
sudo apt install -y usbutils setserial
```

## 📁 BƯỚC 2: TẠO CÁC FILE CẦN THIẾT

### 2.1 File cấu trúc
```
/opt/actiwell/
├── app.py                    # Main Flask application
├── config.py                 # Configuration
├── models.py                 # Data models
├── database_manager.py       # Database operations
├── device_manager.py         # Device communication
├── actiwell_api.py          # Actiwell API integration
├── requirements.txt          # Python dependencies
├── .env                     # Environment variables
├── routes/
│   ├── __init__.py
│   ├── device_routes.py
│   ├── measurement_routes.py
│   └── sync_routes.py
├── templates/
│   ├── dashboard.html
│   ├── error.html
│   └── initializing.html
├── static/                  # CSS, JS files
├── logs/                    # Application logs
└── data/                    # Raw measurement data
```

### 2.2 Tạo requirements.txt
```bash
cat > /opt/actiwell/requirements.txt << 'EOF'
Flask==2.3.3
Flask-CORS==4.0.0
mysql-connector-python==8.1.0
pyserial==3.5
requests==2.31.0
PyJWT==2.8.0
python-dotenv==1.0.0
psutil==5.9.5
EOF
```

### 2.3 Tạo .env configuration
```bash
cat > /opt/actiwell/.env << 'EOF'
# Database Configuration
DB_HOST=localhost
DB_USER=actiwell_user
DB_PASSWORD=actiwell_pass123
DB_NAME=actiwell_measurements
DB_POOL_SIZE=5

# Actiwell API Configuration (UPDATE THESE VALUES)
ACTIWELL_API_URL=https://api.actiwell.com
ACTIWELL_API_KEY=your_api_key_here
ACTIWELL_LOCATION_ID=1

# Application Configuration
SECRET_KEY=actiwell-secret-key-2024-change-this-in-production
JWT_EXPIRE_HOURS=24
WEB_PORT=5000
WEB_HOST=0.0.0.0
FLASK_DEBUG=False

# Device Configuration
TANITA_BAUDRATE=9600
INBODY_BAUDRATE=9600
DEVICE_TIMEOUT=5
AUTO_DETECT_DEVICES=True

# Storage Paths
DATA_STORAGE_PATH=/opt/actiwell/data
LOG_STORAGE_PATH=/opt/actiwell/logs
EOF
```

### 2.4 Copy source code files
**Copy tất cả source code từ các artifacts trước vào thư mục tương ứng:**

- `app.py` - Flask Application Core
- `config.py` - Configuration
- `models.py` - Data Models
- `database_manager.py` - Database Manager
- `device_manager.py` - Device Manager
- `actiwell_api.py` - Actiwell API Integration
- `routes/*.py` - API Routes

## 🗄️ BƯỚC 3: SETUP DATABASE

### 3.1 Cấu hình MySQL
```bash
# Secure MySQL installation
sudo mysql_secure_installation

# Tạo database và user
sudo mysql -u root -p << 'EOF'
CREATE DATABASE actiwell_measurements CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER 'actiwell_user'@'localhost' IDENTIFIED BY 'actiwell_pass123';
GRANT ALL PRIVILEGES ON actiwell_measurements.* TO 'actiwell_user'@'localhost';
FLUSH PRIVILEGES;
EXIT;
EOF
```

### 3.2 Tạo database schema
```sql
-- Chạy script này để tạo tables
USE actiwell_measurements;

-- Body measurements table
CREATE TABLE body_measurements (
    id INT AUTO_INCREMENT PRIMARY KEY,
    measurement_uuid VARCHAR(36) UNIQUE NOT NULL,
    device_id VARCHAR(50) NOT NULL,
    device_type VARCHAR(20) NOT NULL,
    customer_phone VARCHAR(20) NOT NULL,
    customer_id INT NULL,
    measurement_timestamp DATETIME NOT NULL,
    
    -- Basic measurements
    weight_kg DECIMAL(5,2) NULL,
    height_cm DECIMAL(5,2) NULL,
    bmi DECIMAL(5,2) NULL,
    
    -- Body composition
    body_fat_percent DECIMAL(5,2) NULL,
    muscle_mass_kg DECIMAL(5,2) NULL,
    bone_mass_kg DECIMAL(5,2) NULL,
    total_body_water_percent DECIMAL(5,2) NULL,
    protein_percent DECIMAL(5,2) NULL,
    mineral_percent DECIMAL(5,2) NULL,
    
    -- Advanced metrics
    visceral_fat_rating INT NULL,
    subcutaneous_fat_percent DECIMAL(5,2) NULL,
    skeletal_muscle_mass_kg DECIMAL(5,2) NULL,
    
    -- Metabolic data
    bmr_kcal INT NULL,
    metabolic_age INT NULL,
    
    -- Segmental analysis
    right_arm_muscle_kg DECIMAL(5,2) NULL,
    left_arm_muscle_kg DECIMAL(5,2) NULL,
    trunk_muscle_kg DECIMAL(5,2) NULL,
    right_leg_muscle_kg DECIMAL(5,2) NULL,
    left_leg_muscle_kg DECIMAL(5,2) NULL,
    
    -- Quality and sync
    measurement_quality VARCHAR(20) DEFAULT 'good',
    impedance_values TEXT NULL,
    synced_to_actiwell BOOLEAN DEFAULT FALSE,
    sync_attempts INT DEFAULT 0,
    last_sync_attempt DATETIME NULL,
    sync_error_message TEXT NULL,
    
    -- Raw data
    raw_data TEXT NULL,
    processing_notes TEXT NULL,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_customer_phone (customer_phone),
    INDEX idx_device_id (device_id),
    INDEX idx_measurement_time (measurement_timestamp),
    INDEX idx_sync_status (synced_to_actiwell)
) ENGINE=InnoDB;

-- Device status table
CREATE TABLE device_status (
    id INT AUTO_INCREMENT PRIMARY KEY,
    device_id VARCHAR(50) UNIQUE NOT NULL,
    device_type VARCHAR(20) NOT NULL,
    serial_port VARCHAR(50) NOT NULL,
    connection_status VARCHAR(20) DEFAULT 'disconnected',
    firmware_version VARCHAR(50) NULL,
    last_heartbeat DATETIME NULL,
    last_measurement DATETIME NULL,
    total_measurements INT DEFAULT 0,
    error_count INT DEFAULT 0,
    configuration JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Customer mapping table
CREATE TABLE customer_mapping (
    id INT AUTO_INCREMENT PRIMARY KEY,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    actiwell_customer_id INT NOT NULL,
    customer_name VARCHAR(255) NULL,
    customer_email VARCHAR(255) NULL,
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_phone (phone_number),
    INDEX idx_actiwell_id (actiwell_customer_id)
) ENGINE=InnoDB;

-- Insert test data
INSERT INTO customer_mapping (phone_number, actiwell_customer_id, customer_name) VALUES 
('0901234567', 1, 'Test Customer 1'),
('0907654321', 2, 'Test Customer 2');
```

## 🐍 BƯỚC 4: SETUP PYTHON ENVIRONMENT

### 4.1 Tạo virtual environment
```bash
cd /opt/actiwell

# Tạo virtual environment
python3 -m venv venv

# Activate environment
source venv/bin/activate

# Upgrade pip
pip install --upgrade pip

# Install dependencies
pip install -r requirements.txt
```

### 4.2 Tạo __init__.py files
```bash
# Tạo __init__.py cho routes package
touch routes/__init__.py
```

## 🔌 BƯỚC 5: CẤU HÌNH USB DEVICES

### 5.1 USB permissions
```bash
# Add user to dialout group
sudo usermod -a -G dialout actiwell

# Create udev rules
sudo tee /etc/udev/rules.d/99-actiwell-devices.rules << 'EOF'
# Tanita devices
SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", MODE="0666", GROUP="dialout"
SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6014", MODE="0666", GROUP="dialout"

# InBody devices  
SUBSYSTEM=="tty", ATTRS{interface}=="InBody*", MODE="0666", GROUP="dialout"

# Generic USB-to-Serial
SUBSYSTEM=="tty", ATTRS{idVendor}=="067b", ATTRS{idProduct}=="2303", MODE="0666", GROUP="dialout"
SUBSYSTEM=="tty", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60", MODE="0666", GROUP="dialout"
EOF

# Reload udev rules
sudo udevadm control --reload-rules
sudo udevadm trigger
```

## 🚀 BƯỚC 6: CHẠY HỆ THỐNG

### 6.1 Test run
```bash
cd /opt/actiwell
source venv/bin/activate

# Test database connection
python3 -c "
import mysql.connector
conn = mysql.connector.connect(
    host='localhost',
    user='actiwell_user', 
    password='actiwell_pass123',
    database='actiwell_measurements'
)
print('✓ Database connection OK')
conn.close()
"

# Test imports
python3 -c "
import flask
import mysql.connector
import serial
print('✓ All imports OK')
"

# Run application
python3 app.py
```

**Expected output:**
```
INFO - Initializing Database Manager...
INFO - Database Manager initialized successfully
INFO - Initializing Device Manager...
INFO - Device Manager initialized successfully
INFO - Initializing Actiwell API...
INFO - Actiwell API initialized successfully
INFO - All managers initialized successfully
INFO - Starting background services...
INFO - Measurement processor service started
INFO - Sync retry service started
INFO - Started 2 background services
INFO - Application startup completed successfully
INFO - Connected devices: 0
INFO - Server ready on 0.0.0.0:5000
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://[your-ip]:5000
```

### 6.2 Tạo systemd service (Production)
```bash
# Tạo service file
sudo tee /etc/systemd/system/actiwell-backend.service << 'EOF'
[Unit]
Description=Actiwell Body Measurement Backend
After=network.target mysql.service
Wants=mysql.service

[Service]
Type=simple
User=actiwell
Group=actiwell
WorkingDirectory=/opt/actiwell
Environment=PATH=/opt/actiwell/venv/bin
ExecStart=/opt/actiwell/venv/bin/python app.py
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Enable và start service
sudo systemctl daemon-reload
sudo systemctl enable actiwell-backend
sudo systemctl start actiwell-backend

# Check status
sudo systemctl status actiwell-backend
```

## 🌐 BƯỚC 7: TRUY CẬP HỆ THỐNG

### 7.1 Web Dashboard
- **URL**: http://localhost:5000 hoặc http://[server-ip]:5000
- **Login**: 
  - Username: `admin`
  - Password: `actiwell123`

### 7.2 API Endpoints
```bash
# Health check
curl http://localhost:5000/api/health

# Login và get token
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"actiwell123"}'

# Get device status (with token)
curl -H "Authorization: Bearer YOUR_TOKEN" \
  http://localhost:5000/api/devices/status

# Get measurements
curl -H "Authorization: Bearer YOUR_TOKEN" \
  http://localhost:5000/api/measurements
```

## 🔧 BƯỚC 8: CẤU HÌNH ACTIWELL API

### 8.1 Cập nhật .env file
```bash
# Edit .env file
nano /opt/actiwell/.env

# Update these values:
ACTIWELL_API_URL=https://your-actiwell-api-url.com
ACTIWELL_API_KEY=your-actual-api-key
ACTIWELL_LOCATION_ID=your-location-id
```

### 8.2 Restart service
```bash
sudo systemctl restart actiwell-backend
```

## 📊 BƯỚC 9: KIỂM TRA HOẠT ĐỘNG

### 9.1 Utility scripts
```bash
# Tạo script kiểm tra trạng thái
cat > /opt/actiwell/check_status.sh << 'EOF'
#!/bin/bash
echo "=== ACTIWELL BACKEND STATUS ==="
echo "Service Status:"
sudo systemctl status actiwell-backend --no-pager -l

echo -e "\nDevice Ports:"
ls -la /dev/ttyUSB* /dev/ttyACM* 2>/dev/null || echo "No USB devices found"

echo -e "\nDatabase Status:"
mysql -u actiwell_user -pactiwell_pass123 -e "SELECT COUNT(*) as total_measurements FROM actiwell_measurements.body_measurements;" 2>/dev/null || echo "Database connection failed"

echo -e "\nAPI Status:"
curl -s http://localhost:5000/api/health | python3 -m json.tool 2>/dev/null || echo "API not responding"

echo -e "\nLogs (last 10 lines):"
sudo journalctl -u actiwell-backend -n 10 --no-pager
EOF

chmod +x /opt/actiwell/check_status.sh

# Chạy kiểm tra
/opt/actiwell/check_status.sh
```

### 9.2 Test với sample data
```bash
# Test measurement creation
curl -X POST http://localhost:5000/api/measurements \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "device_id": "test_device",
    "customer_phone": "0901234567",
    "weight_kg": 70.5,
    "body_fat_percent": 15.2,
    "muscle_mass_kg": 55.3
  }'
```

## 🚨 TROUBLESHOOTING

### Common Issues:

1. **Database connection failed**
   ```bash
   # Check MySQL service
   sudo systemctl status mysql
   
   # Check credentials
   mysql -u actiwell_user -pactiwell_pass123 -e "SELECT 1;"
   ```

2. **Device not detected**
   ```bash
   # Check USB devices
   lsusb
   ls -la /dev/ttyUSB*
   
   # Check permissions
   groups actiwell
   ```

3. **Import errors**
   ```bash
   # Check virtual environment
   source /opt/actiwell/venv/bin/activate
   pip list
   
   # Reinstall if needed
   pip install -r requirements.txt
   ```

4. **Service won't start**
   ```bash
   # Check logs
   sudo journalctl -u actiwell-backend -f
   
   # Check file permissions
   sudo chown -R actiwell:actiwell /opt/actiwell
   ```

## 🎯 NEXT STEPS

1. **Kết nối thiết bị Tanita/InBody thực tế**
2. **Cấu hình Actiwell API credentials**
3. **Test measurement flow với thiết bị thật**
4. **Setup monitoring và alerts**
5. **Backup và disaster recovery**

---

**🎉 Chúc mừng! Hệ thống Actiwell Backend đã sẵn sàng hoạt động!**